*마스크 연산
ROI(Region of Interest)
- 관심 영역
- 영상에서 특정 연산을 수행하고자 하는 임의의 부분 영역

*마스크 연산이란?
- 마스크 영상의 픽셀값이 0이 아닌 위치에서만 연산이 수행됨
- 마스크 영상은 cv2.CV_8UC1 타입(그레이 스케일 영상) <> OpenCV의  타입 <> np의 자료형
- 마스크 영상으로는 보통 0 또는 255로 구성된 이진영상(binary image)를 사용한다

*마스크 연산을 지원하는 픽셀 값 복사 함수
cv2.copyTo(src, mask, dst = None)
    src: 입력 영상
    mask : 마스크 영상. 0이 아닌 픽셀에 대해서만 복사 연산을 수행
    dst : 출력 영상. 만약 src와 크기 및 타입이 같은 dst를 입력으로 지정하면 dst를 새로 생성하지 않고
          연산을 수행
          지정하지 않으면 dst를 새로 생성하여 연산을 수행한 후에 반환
*그리기 함수
- 선, 도형, 문자열 출력하는 함수를 지원
- 알고리즘을 이용하여 영상의 픽셀값 자체를 변경
- 그레이스케일 영상에서는 컬러로 그리기가 안됨

*직선 그리기 함수
cv2.line(img, pt1, pt2, color, thickness = None, lineType = None, shift = None)
    img : 그림을 그릴 영상
    pt1 , pt2 : 직선의 시작점과 끝점(x, y) 튜플
    color : 선 색상 (b, g, r) 튜플 또는 정수값
    thickness : 선 두께, 기본값은 1
    lineType : 선 타입. cv2.LINE_4, cv2.LINE_8, cv2.LINE_AA 중 선택
    shift : 그리기 좌표값의 축소 비율 , 기본값은 0

*사각형 그리기 함수
cv2.rectangle(img, pt1, pt2, color, thickness = None, lineType = None, shift = None)
cv2.rectangle(img, rec, color, thickness = None, lineType = None, shift = None)
    pt1, pt2 : 사각형의 두 꼭짓점 좌표 (x, y) 튜플
    rec : 사각형의 위치정보(x, y, w, h) 튜플
    thickness : 선 두께, 음수(-1)을 설정하면 내부를 채움

* 원그리기 함수
cv2.circle(img, center, radius, color, thickness = None, lineType, shift = None)
    center : 원의 중심 좌표(x, y) 튜플
    radius : 원의 반지름

* 문자열 출력
cv2.putText(img, text, org, fontFace, fontScale, color, thickness = None, lineType = None, bottomLeftOrigin = None)
    text : 출력할 문자열
    org : 영상에서 문자열을 출력할 위치의 좌측 하단 좌표(x, y) 튜플
    fontFace : 폰트 종류, cv2.FONT_HERESHEY_
    fontScale : 폰트 크기 확대/축소 비율
    bottomLeftOrigin : True는 영상의 좌측 하단을 원점으로 간주. 기본값 False

/글꼴
FONT_HERSHEY_SIMPLEX
FONT_HERSHEY_PLAIN
FONT_HERSHEY_DUPLEX
FONT_HERSHEY_COMPLEX
FONT_HERSHEY_TRIPLEX
FONT_HERSHEY_SMALL

동영상 처리
cv2.VideoCapture 클래스
- 카메라와 동영상으로부터 프레임(frame)을 받아오는 작업을 처리함

캠
cv2.VideoCapture(index)
index : camera_id + domain_offset_id 시스템 기본 카메라를 기본 방법으로 open하려면 0을 넣음

cv2.VideoCapture.open(index) -> return
return: 성공하면 True, 실패하면 False

동영상
cv2.VideoCapture(fileName)
fileName : 비디오 파일 이름

cv2.VideoCapture.open(fileName) -> return
return : 성공하면 True, 실패하면 False

비디오 캡쳐가 준비되었는지 여부
cv2.VideoCapture.isOpened() -> return
return : 성공하면 True, 실패하면 False

프레임을 받아오기
cv2.VideoCapture.read(image = None) -> return, image
return : 성공하면 True, 실패하면 False
image : 현재프레임(numpy.ndarray)

cv2.VideoWriter 클래스
프레임을 동영상 파일로 저장할 수 있음
Fourcc(4-문자코드, four character code)
동영상 파일의 코덱, 압축 방식, 색상, 픽셀, 포맷등을 정의하는 값

DIVX MPEG-4 : cv2.VideoWriter_fourcc('*DIVX')
XVID MPEG-4 : cv2.VideoWriter_fourcc('*XVID')
FFMPEG MPEG-4 : cv2.VideoWriter_fourcc('*FMP4')
H.264/AVC : cv2.VideoWriter_fourcc('*X264')
Motion-JPE : cv2.VideoWriter_fourcc('*MJPG')

cv2.VideoWriter(filename, fourcc, fps, frameSize, isColor = None)
    filename : 파일 이름
    fourcc : 어떤 포맷방식으로 만들지
    fps : 초당 프레임 수
    frameSize : 프레임 크기, (width, height) 튜플
    isColor : 컬러 영상이면 True, 흑백 영상이면 False

비디오 파일이 준비되었는지 확인
cv2.VideoWriter.isOpened() -> return
return : 성공하면 True, 실패하면 False

프레임 저장하기
cv2.VideoWriter.write(image) -> return
image : 저장할 프레임(numpy.ndarray) 




